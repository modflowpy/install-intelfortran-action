name: Install Intel Fortran
description: Install, cache, and configure environment for the Intel Fortran compiler
inputs:
  path:
    description: Path to install location
    required: false
    default: ~/.local/bin/ifort
  # version:
  #   description: Version of the intel oneAPI HPC toolkit to install
  #   required: false
  #   default: "2022.3"
  # components:
  #   description: Extra HPC toolkit components to install
  #   required: false
outputs:
  cache-hit:
    description: Whether the installation was restored from cache
    value: ${{ steps.cache-ifort.outputs.cache-hit }}
runs:
  using: composite
  steps:
    - name: Set install path
      if: runner.os != 'Windows'
      shell: bash
      run: |
        # normalize install path
        normalized=$(python3 $GITHUB_ACTION_PATH/scripts/normalize_path.py "${{ inputs.path }}")
        echo "normalized install dir path: $normalized"
        
        # set environment variable
        echo "INTEL_HPCKIT_INSTALL_PATH=$normalized" >> $GITHUB_ENV
        mkdir -p "$normalized"

    - name: Set install path
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # normalize install path
        $normalized = $(python3 $(Join-Path "$env:GITHUB_ACTION_PATH" "scripts" "normalize_path.py") "${{ inputs.path }}")
        echo "normalized install dir path: $normalized"
        
        # other locations fail on windows
        $default = "C:\Program Files (x86)\Intel\oneAPI"
        if (!($normalized -eq $default)) {
          echo "overriding configured path with default Windows install path: '$default'"
          $normalized = $default
        }
        
        # set environment variable
        echo "INTEL_HPCKIT_INSTALL_PATH=$normalized" | Out-File -FilePath "$env:GITHUB_ENV" -Encoding utf8 -Append
        md -Force "$normalized"  

    - name: Set environment variables
      shell: bash
      run: |
        echo "setting toolkit variables"
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "INTEL_HPCKIT_INSTALLER_URL=https://registrationcenter-download.intel.com/akdlm/irc_nas/18679/l_HPCKit_p_2022.2.0.191_offline.sh" >> $GITHUB_ENV
          echo "INTEL_HPCKIT_COMPONENTS=intel.oneapi.lin.ifort-compiler" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "INTEL_HPCKIT_INSTALLER_URL=https://registrationcenter-download.intel.com/akdlm/IRC_NAS/18681/m_HPCKit_p_2022.2.0.158_offline.dmg" >> $GITHUB_ENV
          echo "INTEL_HPCKIT_COMPONENTS=intel.oneapi.mac.ifort-compiler" >> $GITHUB_ENV
        else
          echo "INTEL_HPCKIT_INSTALLER_URL=https://registrationcenter-download.intel.com/akdlm/IRC_NAS/18680/w_HPCKit_p_2022.2.0.173_offline.exe" >> $GITHUB_ENV
          echo "INTEL_HPCKIT_COMPONENTS=intel.oneapi.win.ifort-compiler" >> $GITHUB_ENV
        fi
 
        version="2022.3"
        echo "using toolkit version $version"
        echo "INTEL_HPCKIT_VERSION=$version" >> $GITHUB_ENV
        echo "FC=ifort" >> $GITHUB_ENV

    - name: Hide GNU tar
      if: runner.os == 'windows'
      shell: bash
      run: |
        # hide GNU tar (can't handle symlinks) so default Windows tar is used
        mv "C:\Program Files\Git\usr\bin\tar.exe" "$RUNNER_TEMP\tar.exe"

    - name: Restore cache
      id: cache-ifort
      uses: martijnhols/actions-cache/restore@v3
      with:
        path: ${{ env.INTEL_HPCKIT_INSTALL_PATH }}
        key: ifort-${{ runner.os }}-${{ env.INTEL_HPCKIT_VERSION }}-${{ env.INTEL_HPCKIT_COMPONENTS }}

    - name: Restore GNU tar
      if: runner.os == 'windows'
      shell: bash
      run: |
        # restore GNU tar
        mv "$RUNNER_TEMP\tar.exe" 'C:\Program Files\Git\usr\bin\tar.exe'

    - name: Install Intel fortran
      if: runner.os != 'Windows' && steps.cache-ifort.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "downloading and running HPC kit installer"
        os=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')
        "${{ github.action_path }}/scripts/install_$os.sh" "${{ env.INTEL_HPCKIT_INSTALL_PATH }}" "${{ env.INTEL_HPCKIT_INSTALLER_URL }}" "${{ env.INTEL_HPCKIT_COMPONENTS }}"

    - name: Install Intel fortran
      if: runner.os == 'Windows' && steps.cache-ifort.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        :: download HPC kit installer and install Intel fortran
        call "%GITHUB_ACTION_PATH%\scripts\install_windows.bat" "${{ env.INTEL_HPCKIT_INSTALL_PATH }}" "${{ env.INTEL_HPCKIT_INSTALLER_URL }}" "${{ env.INTEL_HPCKIT_COMPONENTS }}"

    - name: Save cache
      if: steps.cache-ifort.outputs.cache-hit != 'true'
      uses: martijnhols/actions-cache/save@v3
      with:
        path: ${{ env.INTEL_HPCKIT_INSTALL_PATH }}
        key: ifort-${{ runner.os }}-${{ env.INTEL_HPCKIT_VERSION }}-${{ env.INTEL_HPCKIT_COMPONENTS }}

    - name: Configure system path
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "getting os tag"
        if [ "$RUNNER_OS" == "Linux" ]; then
          ostag="linux"
        
          # workaround missing libimf.so error
          # https://stackoverflow.com/a/70700494/6514033
          sudo mkdir -p /etc/ld.so.conf.d
          echo "$INTEL_HPCKIT_INSTALL_PATH/compiler/latest/$ostag/compiler/lib/intel64_lin" | sudo tee -a /etc/ld.so.conf.d/intel_libs.conf
          sudo ldconfig
        elif [ "$RUNNER_OS" == "macOS" ]; then
          ostag="mac"
        else
          ostag="windows"
        fi
        
        bindir="$INTEL_HPCKIT_INSTALL_PATH/compiler/latest/$ostag/bin/intel64"
        echo "adding ifort compiler bin dir '$bindir' to path"
        echo "$bindir" >> $GITHUB_PATH
        echo "INTEL_COMPILER_BIN_PATH=$bindir" >> $GITHUB_ENV

    - name: Configure system path
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        :: add compiler bin dir to path
        set bindir=%INTEL_HPCKIT_INSTALL_PATH%\compiler\latest\windows\bin\intel64
        echo adding ifort compiler bin dir '%bindir%' to path
        echo %bindir%>>"%GITHUB_PATH"
        echo INTEL_COMPILER_BIN_PATH=%bindir%>>"%GITHUB_ENV"
        
        :: prepend MSVC bindir to path
        set bindir=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.33.31629\bin\Hostx64\x64
        echo adding MSVC linker bin dir '%bindir%' to path
        echo %bindir%>>"%GITHUB_PATH%"

    - name: Configure oneAPI environment
      if: runner.os != 'Windows'
      shell: bash
      run: |
        # configure oneAPI environment
        # https://www.intel.com/content/www/us/en/develop/documentation/oneapi-programming-guide/top/oneapi-development-environment-setup/use-the-setvars-script-with-linux-or-macos.html#use-the-setvars-script-with-linux-or-macos
        echo "configuring Intel environment"
        source "$INTEL_HPCKIT_INSTALL_PATH/setvars.sh"
        
        echo "persisting oneAPI environment"
        env | grep oneapi >> $GITHUB_ENV
        
    - name: Configure oneAPI environment
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo configuring oneAPI environment
        call "%INTEL_HPCKIT_INSTALL_PATH%\setvars-vcvarsall.bat"
        :: this script fails when install location is not the default
        call "%INTEL_HPCKIT_INSTALL_PATH%\compiler\2022.1.0\env\vars.bat"
        
        echo persisting oneAPI environment
        set | findstr /c:"oneAPI" >> "%GITHUB_ENV%"